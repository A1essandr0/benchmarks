version: "3"

services:
  zookeeper:
    image: zookeeper:latest
    container_name: zookeeper
    ports:
      - 2181:2181
    restart: "no"

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
      - 9093:9093
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,PLAINTEXT://0.0.0.0:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,PLAINTEXT://localhost:9093
      ALLOW_PLAINTEXT_LISTENER: "yes"

      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG4J_ROOT_LOGLEVEL: WARN
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_MESSAGE_MAX_BYTES: 10485760
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 100001200
    restart: "no"
    # volumes:
    #   - ./kafka-data:/var/lib/kafka/data

  init-kafka:
    image: confluentinc/cp-kafka:latest
    container_name: init-kafka
    depends_on:
      - kafka
    command: "bash -c 'echo Create topics ... && \
      kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --topic test-events-from --partitions 1 && \
      kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --topic test-events-to --partitions 1 && \
      kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --topic mt-raw-request --partitions 1 && \ 
      kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --topic mt-raw-request-updated --partitions 1'"

  # kafka-ui:
  #   image: provectuslabs/kafka-ui:master
  #   container_name: kafka-ui
  #   environment:
  #     KAFKA_CLUSTERS_0_NAME: local_containers
  #     KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'kafka:9092'
  #   restart: "no"
  #   ports:
  #     - "7070:8080"
  #   depends_on:
  #     - kafka
  #     - init-kafka
  #     - zookeeper



  # fastapi_collector:
  #   image: fastapi_collector:latest
  #   container_name: fastapi_collector
  #   environment:
  #     VAR: VALUE
  #   restart: "no"
  #   ports:
  #     - "5005:5005"
  #   depends_on:
  #     - kafka
  #     - zookeeper

  # fastapi_collector_uvloop:
  #   image: fastapi_collector_uvloop:latest
  #   container_name: fastapi_collector_uvloop
  #   environment:
  #     VAR: VALUE
  #   restart: "no"
  #   ports:
  #     - "5006:5006"
  #   depends_on:
  #     - kafka
  #     - zookeeper

  # faust_sender:
  #   image: faust_sender:latest
  #   container_name: faust_sender
  #   environment:
  #     VAR: VALUE
  #   restart: "no"
  #   ports:
  #     - "6050:6050"
  #   depends_on:
  #     - kafka
  #     - init-kafka
  #     - zookeeper
  #   command: ["./wait-for-it.sh", "kafka:5432", "--", "./faust-sender.sh"]



  goka_sarama_collector:
    image: goka_sarama_collector:latest
    container_name: goka_sarama_collector
    environment:
      VAR: VALUE
    restart: "no"
    ports:
      - "5005:5005"
    depends_on:
      - kafka
      - init-kafka
      - zookeeper
    command: ["./wait-and-start.sh"]
    # when using container with bash
    # command: ["./wait-for-it.sh", "kafka:5432", "--", "./goka-sarama-collector"]

  # goka_sarama_sender:
  #   image: goka_sarama_sender:latest
  #   container_name: goka_sarama_sender
  #   environment:
  #     VAR: VALUE
  #   restart: "no"
  #   depends_on:
  #     - kafka
  #     - init-kafka
  #     - zookeeper
  #   command: ["./wait-and-start.sh"]
  #   # when using container with bash
  #   # command: ["./wait-for-it.sh", "kafka:5432", "--", "./goka-sarama-sender"]

  franz_sender:
    image: franz_sender:latest
    container_name: franz_sender
    environment:
      VAR: VALUE
    restart: "no"
    depends_on:
      - kafka
      - init-kafka
      - zookeeper
    command: ["./wait-and-start.sh"]
    # when using container with bash
    # command: ["./wait-for-it.sh", "kafka:5432", "--", "./franz-sender"]



  # librd_grpc_collector:
  #   image: librd_grpc_collector:latest
  #   container_name: librd_grpc_collector
  #   environment:
  #     VAR: VALUE
  #   restart: "no"
  #   ports:
  #     - "5006:5006"
  #   depends_on:
  #     - kafka
  #     - init-kafka
  #     - zookeeper
  #   command: ["./wait-and-start.sh"]
  #   # when using container with bash
  #   # command: ["./wait-for-it.sh", "kafka:5432", "--", "./librd-grpc-collector"]






